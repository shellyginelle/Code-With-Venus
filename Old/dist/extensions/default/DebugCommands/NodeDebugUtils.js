define(function(require,exports,module){"use strict";var NodeConnection=brackets.getModule("utils/NodeConnection");var _nodeConnection=null;var _nodeLog=[];function logNodeState(){if(brackets.app&&brackets.app.getNodeState){brackets.app.getNodeState(function(err,port){if(err){console.log("[NodeDebugUtils] Node is in error state "+err)}else{console.log("[NodeDebugUtils] Node is listening on port "+port)}})}else{console.error("[NodeDebugUtils] No brackets.app.getNodeState function. Maybe you're running the wrong shell?")}}function restartNode(){try{_nodeConnection.domains.base.restartNode()}catch(e){alert("Failed trying to restart Node: "+e.message)}}function enableDebugger(){try{_nodeConnection.domains.base.enableDebugger()}catch(e){alert("Failed trying to enable Node debugger: "+e.message)}}function handleLogEvent(evt,level,timestamp,message){var timestampAsDate=new Date(timestamp);_nodeLog.push({level:level,timestamp:timestampAsDate,message:message});var formattedMessage="[node-"+level+" "+timestampAsDate.toLocaleTimeString()+"] "+message;switch(level){case"info":case"warn":case"error":console[level](formattedMessage);break;default:console.log(formattedMessage)}}_nodeConnection=new NodeConnection;_nodeConnection.connect(true);_nodeConnection.on("base:log",handleLogEvent);exports.logNodeState=logNodeState;exports.restartNode=restartNode;exports.enableDebugger=enableDebugger});