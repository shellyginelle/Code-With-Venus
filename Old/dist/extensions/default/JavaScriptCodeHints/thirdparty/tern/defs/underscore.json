{
  "!name": "underscore",
  "_": {
    "!doc": "Save the previous value of the `_` variable.",
    "!type": "fn(obj: ?) -> +_",
    "VERSION": {
      "!type": "string"    },
    "after": {
      "!doc": "Returns a function that will only be executed after being called N times."      "!type": "fn(times: number, func: fn()) -> !1"
    },
    "all": "_.every",
    "any": "_.some",
    "bind": {
      "!doc": "Create a function bound to a given object (assigning `this`, and arguments, optionally).",
      "!type": "fn(func: ?, context?: ?, args?: ?) -> !0"    },
    "bindAll": {
      "!doc": "Bind all of an object's methods to that object.",
      "!type": "fn(obj: ?, names?: [string])"    },
    "chain": {
      "!doc": "Add a \"chain\" function, which will delegate to the wrapper.",
      "!type": "fn(obj: ?)"    },
    "clone": {
      "!doc": "Create a (shallow-cloned) duplicate of an object.",
      "!type": "fn(obj: ?) -> !0"    },
    "collect": "_.map",
    "compact": {
      "!doc": "Trim out all falsy values from an array.",
      "!type": "fn(array: [?]) -> [?]"    },
    "compose": {
      "!doc": "Returns a function that is the composition of a list of functions, each consuming the return value of the function that follows.",
      "!type": "fn(a: fn(), b: fn()) -> fn() -> !1.!ret"    },
    "contains": {
      "!doc": "Determine if the array or object contains a given value (using `===`).",
      "!type": "fn(list: [?], target: ?) -> bool"    },
    "countBy": {
      "!doc": "Counts instances of an object that group by a certain criterion.",
      "!type": "fn(obj: ?, iterator: fn(elt: ?, i: number) -> ?, context?: ?) -> ?"    },
    "debounce": {
      "!doc": "Returns a function, that, as long as it continues to be invoked, will not be triggered.",
      "!type": "fn(func: fn(), wait: number, immediate?: bool) -> !0"    },
    "defaults": {
      "!doc": "Fill in a given object with default properties.",
      "!type": "fn(obj: ?, defaults: ?) -> !0",
      "!effects": ["copy !1 !0"]    },
    "defer": {
      "!doc": "Defers a function, scheduling it to run after the current call stack has cleared.",
      "!type": "fn(func: fn(), args?: ?) -> number"    },
    "delay": {
      "!doc": "Delays a function for the given number of milliseconds, and then calls it with the arguments supplied.",
      "!type": "fn(func: fn(), wait: number, args?: ?) -> number"    },
    "detect": "_.find",
    "difference": {
      "!doc": "Take the difference between one array and a number of other arrays.",
      "!type": "fn(array: [?], others?: [?]) -> !0"    },
    "drop": "_.rest",
    "each": {
      "!doc": "Iterates over a list of elements, yielding each in turn to an iterator function.",
      "!type": "fn(obj: [?], iterator: fn(value: ?, index: number), context?: ?)",
      "!effects": ["call !1 this=!2 !0.<i> number"]    },
    "escape": {
      "!doc": "Escapes a string for insertion into HTML.",
      "!type": "fn(string) -> string"    },
    "every": {
      "!doc": "Determine whether all of the elements match a truth test.",
      "!type": "fn(list: [?], iterator: fn(elt: ?, i: number) -> bool, context?: ?) -> bool",
      "!effects": ["call !1 this=!2 !0.<i> number"]    },
    "extend": {
      "!doc": "Extend a given object with all the properties in passed-in object(s).",
      "!type": "fn(destination: ?, source1: ?, source2?: ?) -> !0",
      "!effects": ["copy !1 !0", "copy !2 !0"]    },
    "filter": {
      "!doc": "Looks through each value in the list, returning an array of all the values that pass a truth test.",
      "!type": "fn(list: [?], test: fn(value: ?, index: number) -> bool, context?: ?) -> !0",
      "!effects": ["call !1 this=!2 !0.<i> number"]    },
    "find": {
      "!doc": "Return the first value which passes a truth test.",
      "!type": "fn(list: [?], test: fn(?) -> bool, context?: ?) -> !0.<i>",
      "!effects": ["call !1 !0.<i>"]    },
    "findWhere": {
      "!doc": "Looks through the list and returns the first value that matches all of the key-value pairs listed in properties.",
      "!type": "fn(list: [?], attrs: ?) -> !0.<i>"    },
    "first": {
      "!doc": "Get the first element of an array. Passing n will return the first N values in the array.",
      "!type": "fn(list: [?], n?: number) -> !0.<i>"    },
    "flatten": {
      "!doc": "Return a completely flattened version of an array.",
      "!type": "fn(array: [?], shallow?: bool) -> [?]"    },
    "foldl": "_.reduce",
    "foldr": "_.reduceRight",
    "forEach": "_.each",
    "functions": {
      "!doc": "Return a sorted list of the function names available on the object.",
      "!type": "fn(obj: _) -> [string]"    },
    "groupBy": {
      "!doc": "Groups the object's values by a criterion.",
      "!type": "fn(obj: [?], iterator: fn(elt: ?, i: number) -> ?, context?: ?) -> ?"    },
    "has": {
      "!doc": "Shortcut function for checking if an object has a given property directly on itself (in other words, not on a prototype).",
      "!type": "fn(obj: ?, key: string) -> bool"    },
    "head": "_.first",
    "identity": {
      "!doc": "Returns the same value that is used as the argument.",
      "!type": "fn(value: ?) -> !0"    },
    "include": "_.contains",
    "indexOf": {
      "!doc": "Returns the index at which value can be found in the array, or -1 if value is not present in the array.",
      "!type": "fn(list: [?], item: ?, isSorted?: bool) -> number"    },
    "initial": {
      "!doc": "Returns everything but the last entry of the array.",
      "!type": "fn(array: [?], n?: number) -> !0"    },
    "inject": "_.reduce",
    "intersection": {
      "!doc": "Produce an array that contains every item shared between all the passed-in arrays.",
      "!type": "fn(array: [?], others?: [?]) -> !0"    },
    "invert": {
      "!doc": "Invert the keys and values of an object.",
      "!type": "fn(obj: ?) -> ?"    },
    "invoke": {
      "!doc": "Invoke a method (with arguments) on every item in a collection.",
      "!type": "fn(obj: ?, method: string, args?: ?) -> [?]"    },
    "isArguments": {
      "!doc": "Returns true if object is an Arguments object.",
      "!type": "fn(obj: ?) -> bool"    },
    "isArray": {
      "!doc": "Is a given value an array? Delegates to ECMA5's native Array.isArray",
      "!type": "fn(obj: ?) -> bool"    },
    "isBoolean": {
      "!doc": "Is a given value a boolean?",
      "!type": "fn(obj: ?) -> bool"    },
    "isDate": {
      "!doc": "Returns true if object is a Date object.",
      "!type": "fn(obj: ?) -> bool"    },
    "isElement": {
      "!doc": "Is a given value a DOM element?",
      "!type": "fn(obj: ?) -> bool"    },
    "isEmpty": {
      "!doc": "Is a given array, string, or object empty? An \"empty\" object has no enumerable own-properties.",
      "!type": "fn(obj: ?) -> bool"    },
    "isEqual": {
      "!doc": "Perform a deep comparison to check if two objects are equal.",
      "!type": "fn(a: ?, b: ?) -> bool"    },
    "isFinite": {
      "!doc": "Is a given object a finite number?",
      "!type": "fn(obj: ?) -> bool"    },
    "isFunction": {
      "!doc": "Returns true if object is a Function.",
      "!type": "fn(obj: ?) -> bool"    },
    "isNaN": {
      "!doc": "Is the given value `NaN`? (NaN is the only number which does not equal itself).",
      "!type": "fn(obj: ?) -> bool"    },
    "isNull": {
      "!doc": "Is a given value equal to null?",
      "!type": "fn(obj: ?) -> bool"    },
    "isNumber": {
      "!doc": "Returns true if object is a Number (including NaN).",
      "!type": "fn(obj: ?) -> bool"    },
    "isObject": {
      "!doc": "Is a given variable an object?",
      "!type": "fn(obj: ?) -> bool"    },
    "isRegExp": {
      "!doc": "Returns true if object is a regular expression.",
      "!type": "fn(obj: ?) -> bool"    },
    "isString": {
      "!doc": "Returns true if object is a String.",
      "!type": "fn(obj: ?) -> bool"    },
    "isUndefined": {
      "!doc": "Is a given variable undefined?",
      "!type": "fn(obj: ?) -> bool"    },
    "keys": {
      "!doc": "Retrieve the names of an object's properties. Delegates to ECMAScript 5's native `Object.keys`",
      "!type": "fn(obj: ?) -> [string]"    },
    "last": {
      "!doc": "Get the last element of an array.",
      "!type": "fn(array: [?], n?: number) -> !0.<i>"    },
    "lastIndexOf": {
      "!doc": "Returns the index of the last occurrence of value in the array, or -1 if value is not present.",
      "!type": "fn(array: [?], item: ?, from?: number) -> number"    },
    "map": {
      "!doc": "Produces a new array of values by mapping each value in list through a transformation function (iterator).",
      "!type": "fn(obj: [?], iterator: fn(elt: ?, i: number) -> ?, context?: ?) -> [!1.!ret]",
      "!effects": ["call !1 !this=!2 !0.<i> number"]    },
    "max": {
      "!doc": "Returns the maximum value in list.",
      "!type": "fn(list: [?], iterator?: fn(elt: ?, i: number) -> number, context?: ?) -> number"    },
    "memoize": {
      "!doc": "Memoize an expensive function by storing its results.",
      "!type": "fn(func: fn(), hasher?: fn(args: ?) -> ?) -> !0"    },
    "methods": "_.functions",
    "min": {
      "!doc": "Returns the minimum value in list.",
      "!type": "fn(list: [?], iterator?: fn(elt: ?, i: number) -> number, context?: ?) -> number"    },
    "mixin": {
      "!doc": "Add your own custom functions to the Underscore object.",
      "!type": "fn(obj: _)"    },
    "noConflict": {
      "!doc": "Run Underscore.js in *noConflict* mode, returning the `_` variable to its previous owner. Returns a reference to the Underscore object.",
      "!type": "fn() -> _"    },
    "object": {
      "!doc": "Converts lists into objects.",
      "!type": "fn(list: [?], values?: [?]) -> ?"    },
    "omit": {
      "!doc": "Return a copy of the object without the blacklisted properties.",
      "!type": "fn(obj: ?, keys?: string) -> !0"    },
    "once": {
      "!doc": "Returns a function that will be executed at most one time, no matter how often you call it.",
      "!type": "fn(func: fn() -> ?) -> !0"    },
    "pairs": {
      "!doc": "Convert an object into a list of `[key, value]` pairs.",
      "!type": "fn(obj: ?) -> [[?]]"    },
    "partial": {
      "!doc": "Partially apply a function by creating a version that has had some of its arguments pre-filled, without changing its dynamic `this` context.",
      "!type": "fn(func: ?, args?: ?) -> fn()"    },
    "pick": {
      "!doc": "Return a copy of the object only containing the whitelisted properties.",
      "!type": "fn(obj: ?, keys?: string) -> !0"    },
    "pluck": {
      "!doc": "Convenience version of a common use case of `map`: fetching a property.",
      "!type": "fn(obj: [?], key: string) -> [?]"    },
    "prototype": {
      "chain": {
        "!doc": "Start chaining a wrapped Underscore object.",
        "!type": "fn() -> !this"
      },
      "value": {
        "!doc": "Extracts the result from a wrapped and chained object.",
        "!type": "fn() -> ?"
      },
      "pop": "fn() -> ?",
      "push": "fn(newelt: ?) -> number",
      "reverse": "fn()",
      "shift": "fn() -> ?",
      "sort": "fn() -> !this",
      "splice": "fn(pos: number, amount: number)",
      "unshift": "fn(elt: ?) -> number",
      "concat": "fn(other: ?) -> !this",
      "join": "fn(separator?: string) -> string",
      "slice": "fn(from: number, to?: number) -> !this"
    },
    "random": {
      "!doc": "Return a random integer between min and max (inclusive).",
      "!type": "fn(min: number, max: number) -> number"    },
    "range": {
      "!doc": "A function to create flexibly-numbered lists of integers.",
      "!type": "fn(start?: number, stop: number, step?: number) -> [number]"    },
    "reduce": {
      "!doc": "reduce boils down a list of values into a single value.",
      "!type": "fn(list: [?], iterator: fn(sum: ?, elt: ?, i: number) -> ?, init?: ?, context?: ?) -> !1.!ret",
      "!effects": ["call !1 this=!3 !2 !0.<i> number"]    },
    "reduceRight": {
      "!doc": "The right-associative version of reduce, also known as `foldr`.",
      "!type": "fn(list: [?], iterator: fn(sum: ?, elt: ?, i: number) -> ?, init?: ?, context?: ?) -> !1.!ret",
      "!effects": ["call !1 this=!3 !2 !0.<i> number"]    },
    "reject": {
      "!doc": "Returns the values in list without the elements that the truth test (iterator) passes. The opposite of filter.",
      "!type": "fn(list: [?], iterator: fn(elt: ?, i: number) -> bool, context?: ?) -> !0",
      "!effects": ["call !1 this=!3 !0.<i> number"]    },
    "rest": {
      "!doc": "Returns the rest of the elements in an array.",
      "!type": "fn(array: [?], n?: number) -> !0"    },
    "result": {
      "!doc": "If the value of the named `property` is a function then invoke it with the `object` as context; otherwise, return it.",
      "!type": "fn(object: ?, property: string) -> !0.<i>"    },
    "select": "_.filter",
    "shuffle": {
      "!doc": "Shuffle an array.",
      "!type": "fn(list: [?]) -> !0"    },
    "size": {
      "!doc": "Return the number of elements in an object.",
      "!type": "fn(obj: ?) -> number"    },
    "some": {
      "!doc": "Returns true if any of the values in the list pass the iterator truth test.",
      "!type": "fn(list: [?], iterator: fn(elt: ?, i: number) -> bool, context?: ?) -> bool",
      "!effects": ["call !1 this=!2 !0.<i> number"]    },
    "sortBy": {
      "!doc": "Sort the object's values by a criterion produced by an iterator.",
      "!type": "fn(list: [?], iterator: fn(elt: ?, i: number) -> number, context?: ?) -> !0"    },
    "sortedIndex": {
      "!doc": "Use a comparator function to figure out the smallest index at which an object should be inserted so as to maintain order.",
      "!type": "fn(array: [?], obj: ?, iterator: fn(elt: ?, i: number), context?: ?) -> number"    },
    "tail": "_.rest",
    "take": "_.first",
    "tap": {
      "!doc": "Invokes interceptor with the obj, and then returns obj.",
      "!type": "fn(obj: ?, interceptor: fn()) -> !0",
      "!effects": ["call !1 !0"]    },
    "template": {
      "!doc": "Compiles JavaScript templates into functions that can be evaluated for rendering. ",
      "!type": "fn(text: string, data?: ?, settings?: _.templateSettings) -> fn(data: ?) -> string"    },
    "templateSettings": {
      "!doc": "By default, Underscore uses ERB-style template delimiters, change the following template settings to use alternative delimiters.",
      "escape": "+RegExp",
      "evaluate": "+RegExp",
      "interpolate": "+RegExp"    },
    "throttle": {
      "!doc": "Returns a function, that, when invoked, will only be triggered at most once during a given window of time.",
      "!type": "fn(func: fn(), wait: number, options?: ?) -> !0"    },
    "times": {
      "!doc": "Run a function n times.",
      "!type": "fn(n: number, iterator: fn(), context?: ?) -> [!1.!ret]"    },
    "toArray": {
      "!doc": "Safely create a real, live array from anything iterable.",
      "!type": "fn(obj: ?) -> [?]"    },
    "unescape": {
      "!doc": "The opposite of escape.",
      "!type": "fn(string) -> string"    },
    "union": {
      "!doc": "Produce an array that contains the union: each distinct element from all of the passed-in arrays.",
      "!type": "fn(array: [?], array2: [?]) -> ?0"    },
    "uniq": {
      "!doc": "Produce a duplicate-free version of the array.",
      "!type": "fn(array: [?], isSorted?: bool, iterator?: fn(elt: ?, i: number), context?: ?) -> [?]"    },
    "unique": "_.uniq",
    "uniqueId": {
      "!doc": "Generate a unique integer id (unique within the entire client session). Useful for temporary DOM ids.",
      "!type": "fn(prefix: string) -> string"    },
    "values": {
      "!doc": "Retrieve the values of an object's properties.",
      "!type": "fn(obj: ?) -> [!0.<i>]"    },
    "where": {
      "!doc": "Looks through each value in the list, returning an array of all the values that contain all of the key-value pairs listed in properties.",
      "!type": "fn(list: [?], attrs: ?) -> !0"    },
    "without": {
      "!doc": "Return a version of the array that does not contain the specified value(s).",
      "!type": "fn(array: [?], values: [?]) -> !0"    },
    "wrap": {
      "!doc": "Returns the first function passed as an argument to the second, allowing you to adjust arguments, run code before and after, and conditionally execute the original function.",
      "!type": "fn(func: fn(), wrapper: fn(?)) -> !0",
      "!effects": ["call !1 !0"]    },
    "zip": {
      "!doc": "Zip together multiple lists into a single array -- elements that share an index go together.",
      "!type": "fn(array1: [?], array2: [?]) -> [?]"    }
  }
}
