define(function(require,exports,module){"use strict";var SpecRunnerUtils=brackets.getModule("spec/SpecRunnerUtils");var main=require("main"),InlineDocsViewer=require("InlineDocsViewer"),testCSS=require("text!unittest-files/test1.css"),testHTML=require("text!unittest-files/test1.html"),description=require("text!unittest-files/description.html");describe("WebPlatformDocs",function(){var testCSSInfo=SpecRunnerUtils.parseOffsetsFromText(testCSS),testHTMLInfo=SpecRunnerUtils.parseOffsetsFromText(testHTML),editor,doc,pos;function queryInlineAtPos(info,offset,expectInline,expectedProperty){var widget=null,promise;runs(function(){pos=info.offsets[offset];editor.setSelection(pos);promise=main._inlineProvider(editor,pos);if(expectInline){expect(promise).toBeTruthy()}if(promise){promise.done(function(result){widget=result});if(expectInline){waitsForDone(promise,"WebPlatformDocs _inlineProvider",1e3)}else{waitsForFail(promise,"WebPlatformDocs _inlineProvider",1e3)}}});runs(function(){if(promise){if(expectInline){expect(widget).toBeTruthy();expect(widget.$htmlContent.find(".css-prop-summary h1").text()).toBe(expectedProperty)}else{expect(widget).toBeNull()}}})}describe("InlineDocsProvider database",function(){it("should retrieve the CSS docs database",function(){var json;runs(function(){main._getDocs("css.json").done(function(result){json=result})});waitsFor(function(){return json!==undefined},"read css.json database",5e3);runs(function(){expect(Object.keys(json.PROPERTIES).length).toBeGreaterThan(0)})});it("should retrieve the HTML docs database",function(){var json;runs(function(){main._getDocs("html.json").done(function(result){json=result})});waitsFor(function(){return json!==undefined},"read html.json database",5e3);runs(function(){expect(Object.keys(json.PROPERTIES).length).toBeGreaterThan(0)})})});describe("InlineDocsProvider parsing in CSS",function(){beforeEach(function(){var mock=SpecRunnerUtils.createMockEditor(testCSSInfo.text,"css");editor=mock.editor;doc=mock.doc});afterEach(function(){SpecRunnerUtils.destroyMockEditor(doc)});it("should open docs when the selection is on a CSS property",function(){queryInlineAtPos(testCSSInfo,1,true,"border");queryInlineAtPos(testCSSInfo,2,true,"border")});it("should not open docs when the selection is not on a CSS property",function(){queryInlineAtPos(testCSSInfo,0,false);queryInlineAtPos(testCSSInfo,5,false)});it("should not open docs for an invalid CSS property",function(){queryInlineAtPos(testCSSInfo,3,false)});it("should open docs for a vendor-prefixed CSS property",function(){queryInlineAtPos(testCSSInfo,6,true,"animation")});it("should not open docs for an invalid CSS property (looking like a vendor-prefixed one)",function(){queryInlineAtPos(testCSSInfo,7,false)})});describe("InlineDocsProvider parsing in HTML",function(){beforeEach(function(){var mock=SpecRunnerUtils.createMockEditor(testHTMLInfo.text,"html");editor=mock.editor;doc=mock.doc});afterEach(function(){SpecRunnerUtils.destroyMockEditor(doc)});it("should open docs for CSS in a <style> block",function(){queryInlineAtPos(testHTMLInfo,0,true,"border")});it("should open docs when the selection is on an HTML tag",function(){queryInlineAtPos(testHTMLInfo,1,true,"body")});it("should not open docs when the selection is on an invalid HTML tag",function(){queryInlineAtPos(testHTMLInfo,2,false)});it("should not open docs when the selection is not an HTML tag",function(){queryInlineAtPos(testHTMLInfo,3,false);queryInlineAtPos(testHTMLInfo,4,false)});it("should open docs when the selection is on an HTML attribute",function(){queryInlineAtPos(testHTMLInfo,5,true,"class")});it("should open docs for tag (fallback) when the selection is on an HTML attribute's value",function(){queryInlineAtPos(testHTMLInfo,6,true,"div")});it("should open docs for tag (fallback) when the selection is on an invalid HTML attribute",function(){queryInlineAtPos(testHTMLInfo,7,true,"div")});it("should not open docs when the selection is on an invalid HTML attribute on an invalid HTML tag",function(){queryInlineAtPos(testHTMLInfo,8,false)})});describe("InlineDocsViewer",function(){function createCssPropDetails(summary,url,valuesArr){var values=[],details={SUMMARY:summary,URL:url,VALUES:values};valuesArr.forEach(function(value){values.push({title:value[0]||undefined,description:value[1]||undefined})});return details}it("should process all anchor tags",function(){var prop="my-css-prop",url="http://dev.brackets.io/wiki/css/properties/my-css-prop",details=createCssPropDetails(prop,url,[["normal",description]]),viewer=new InlineDocsViewer(prop,details),$a,href,$links=viewer.$htmlContent.find("a:not(.close)");expect($links.length).toBe(9);$links.each(function(i,anchor){$a=$(anchor);href=$a.attr("href");if($a.attr("data-expected")){expect(href).toBe($a.attr("data-expected"))}else{expect(href).toBe(url);expect($a.hasClass("more-info"))}expect($a.attr("title")).toBe(href)})})})})});