define(function(require,exports,module){"use strict";var CommandManager,EditorManager,PerfUtils,JSUtils,FileUtils=brackets.getModule("file/FileUtils"),SpecRunnerUtils=brackets.getModule("spec/SpecRunnerUtils"),Strings=brackets.getModule("strings"),UnitTestReporter=brackets.getModule("test/UnitTestReporter");var extensionPath=FileUtils.getNativeModuleDirectoryPath(module),testPath=extensionPath+"/unittest-files/syntax",tempPath=SpecRunnerUtils.getTempDirectory(),testWindow,initInlineTest;function rewriteProject(spec){var result=new $.Deferred,infos={},options={parseOffsets:true,infos:infos,removePrefix:true};SpecRunnerUtils.copyPath(testPath,tempPath,options).done(function(){spec.infos=infos;result.resolve()}).fail(function(){result.reject()});return result.promise()}var _initInlineTest=function(openFile,openOffset,expectInline,filesToOpen){var spec=this;filesToOpen=filesToOpen||[];expectInline=expectInline!==undefined?expectInline:true;runs(function(){waitsForDone(rewriteProject(spec),"rewriteProject")});SpecRunnerUtils.loadProjectInTestWindow(tempPath);runs(function(){filesToOpen.push(openFile);waitsForDone(SpecRunnerUtils.openProjectFiles(filesToOpen),"openProjectFiles")});if(openOffset!==undefined){runs(function(){waitsForDone(SpecRunnerUtils.toggleQuickEditAtOffset(EditorManager.getCurrentFullEditor(),spec.infos[openFile].offsets[openOffset]),"toggleQuickEditAtOffset")})}};describe("JSQuickEdit",function(){describe("javaScriptFunctionProvider",function(){beforeEach(function(){initInlineTest=_initInlineTest.bind(this);SpecRunnerUtils.createTestWindowAndRun(this,function(w){testWindow=w;EditorManager=testWindow.brackets.test.EditorManager;CommandManager=testWindow.brackets.test.CommandManager;JSUtils=testWindow.brackets.test.JSUtils});this.addMatchers({toHaveInlineEditorRange:function(range){var i=0,editor=this.actual,hidden,lineCount=editor.lineCount(),shouldHide=[],shouldShow=[],startLine=range.startLine,endLine=range.endLine,visibleRangeCheck;for(i=0;i<lineCount;i++){hidden=editor._codeMirror.getLineHandle(i).hidden||false;if(i<startLine){if(!hidden){shouldHide.push(i)}}else if(i>=startLine&&i<=endLine){if(hidden){shouldShow.push(i)}}else if(i>endLine){if(!hidden){shouldHide.push(i)}}}visibleRangeCheck=editor._visibleRange.startLine===startLine&&editor._visibleRange.endLine===endLine;this.message=function(){var msg="";if(shouldHide.length>0){msg+="Expected inline editor to hide ["+shouldHide.toString()+"].\n"}if(shouldShow.length>0){msg+="Expected inline editor to show ["+shouldShow.toString()+"].\n"}if(!visibleRangeCheck){msg+="Editor._visibleRange ["+editor._visibleRange.startLine+","+editor._visibleRange.endLine+"] should be ["+startLine+","+endLine+"]."}return msg};return shouldHide.length===0&&shouldShow.length===0&&visibleRangeCheck}})});afterEach(function(){initInlineTest=null;testWindow=null;EditorManager=null;CommandManager=null;JSUtils=null;SpecRunnerUtils.closeTestWindow()});it("should ignore tokens that are not function calls or references",function(){var editor,extensionRequire,jsQuickEditMain,tokensFile="tokens.js",promise,offsets;initInlineTest(tokensFile);runs(function(){extensionRequire=testWindow.brackets.getModule("utils/ExtensionLoader").getRequireContextForExtension("JavaScriptQuickEdit");jsQuickEditMain=extensionRequire("main");editor=EditorManager.getCurrentFullEditor();offsets=this.infos[tokensFile];promise=jsQuickEditMain.javaScriptFunctionProvider(editor,offsets[0]);expect(promise).toBe(Strings.ERROR_JSQUICKEDIT_FUNCTIONNOTFOUND);promise=jsQuickEditMain.javaScriptFunctionProvider(editor,offsets[1]);expect(promise).toBe(Strings.ERROR_JSQUICKEDIT_FUNCTIONNOTFOUND);promise=jsQuickEditMain.javaScriptFunctionProvider(editor,offsets[2]);expect(promise).toBe(Strings.ERROR_JSQUICKEDIT_FUNCTIONNOTFOUND);promise=jsQuickEditMain.javaScriptFunctionProvider(editor,offsets[3]);expect(promise).toBe(Strings.ERROR_JSQUICKEDIT_FUNCTIONNOTFOUND);promise=jsQuickEditMain.javaScriptFunctionProvider(editor,offsets[4]);expect(promise).toBe(Strings.ERROR_JSQUICKEDIT_FUNCTIONNOTFOUND)})});it("should open a function with  form: function functionName()",function(){initInlineTest("test1main.js",0);runs(function(){var inlineWidget=EditorManager.getCurrentFullEditor().getInlineWidgets()[0];var inlinePos=inlineWidget.editor.getCursorPos();expect(inlinePos).toEqual(this.infos["test1inline.js"].offsets[0])})});it("should open a function with  form: functionName = function()",function(){initInlineTest("test1main.js",1);runs(function(){var inlineWidget=EditorManager.getCurrentFullEditor().getInlineWidgets()[0];var inlinePos=inlineWidget.editor.getCursorPos();expect(inlinePos).toEqual(this.infos["test1inline.js"].offsets[1])})});it("should open a function with  form: functionName: function()",function(){initInlineTest("test1main.js",2);runs(function(){var inlineWidget=EditorManager.getCurrentFullEditor().getInlineWidgets()[0];var inlinePos=inlineWidget.editor.getCursorPos();expect(inlinePos).toEqual(this.infos["test1inline.js"].offsets[2])})});describe("Code hints tests within quick edit window ",function(){var JSCodeHints,ParameterHintManager;function expectHints(provider,key){if(key===undefined){key=null}expect(provider.hasHints(EditorManager.getActiveEditor(),key)).toBe(true);return provider.getHints(null)}function _waitForHints(hintObj,callback){var complete=false,hintList=null;if(hintObj.hasOwnProperty("hints")){complete=true;hintList=hintObj.hints}else{hintObj.done(function(obj){complete=true;hintList=obj.hints})}waitsFor(function(){return complete},"Expected hints did not resolve",3e3);runs(function(){callback(hintList)})}function hintsPresentExact(hintObj,expectedHints){_waitForHints(hintObj,function(hintList){expect(hintList).toBeTruthy();expect(hintList.length).toBe(expectedHints.length);expectedHints.forEach(function(expectedHint,index){expect(hintList[index].data("token").value).toBe(expectedHint)})})}function _waitForParameterHint(hintObj,callback){var complete=false,hint=null;hintObj.done(function(){hint=JSCodeHints.getSession().getParameterHint();complete=true});waitsFor(function(){return complete},"Expected parameter hint did not resolve",3e3);runs(function(){callback(hint)})}function expectParameterHint(expectedParams,expectedParameter){var request=ParameterHintManager.popUpHint();if(expectedParams===null){expect(request).toBe(null);return}function expectHint(hint){var params=hint.parameters,n=params.length,i;expect(params.length).toBe(expectedParams.length);expect(hint.currentIndex).toBe(expectedParameter);for(i=0;i<n;i++){expect(params[i].name).toBe(expectedParams[i].name);expect(params[i].type).toBe(expectedParams[i].type);if(params[i].isOptional){expect(expectedParams[i].isOptional).toBeTruthy()}else{expect(expectedParams[i].isOptional).toBeFalsy()}}}if(request){_waitForParameterHint(request,expectHint)}else{expectHint(JSCodeHints.getSession().getParameterHint())}}function _waitForJump(oldLocation,callback){var cursor=null;waitsFor(function(){var activeEditor=EditorManager.getActiveEditor();cursor=activeEditor.getCursorPos();return cursor.line!==oldLocation.line||cursor.ch!==oldLocation.ch},"Expected jump did not occur",3e3);runs(function(){callback(cursor)})}function editorJumped(jsCodeHints,testEditor,expectedLocation){var oldLocation=testEditor.getCursorPos();jsCodeHints.handleJumpToDefinition();_waitForJump(oldLocation,function(newCursor){expect(newCursor.line).toBe(expectedLocation.line);expect(newCursor.ch).toBe(expectedLocation.ch);if(expectedLocation.file){var activeEditor=EditorManager.getActiveEditor();expect(activeEditor.document.file.name).toBe(expectedLocation.file)}})}function initJSCodeHints(){var extensionRequire=testWindow.brackets.getModule("utils/ExtensionLoader").getRequireContextForExtension("JavaScriptCodeHints");JSCodeHints=extensionRequire("main");ParameterHintManager=extensionRequire("ParameterHintManager")}beforeEach(function(){initInlineTest("test.html");initJSCodeHints()});afterEach(function(){JSCodeHints=null;ParameterHintManager=null});it("should see code hint lists in quick editor",function(){var start={line:13,ch:11},testPos={line:5,ch:29},testEditor;runs(function(){var openQuickEditor=SpecRunnerUtils.toggleQuickEditAtOffset(EditorManager.getCurrentFullEditor(),start);waitsForDone(openQuickEditor,"Open quick editor")});runs(function(){testEditor=EditorManager.getActiveEditor();testEditor.setCursorPos(testPos);expectParameterHint([{name:"mo",type:"Number"}],0)})});it("should see jump to definition on variable working in quick editor",function(){var start={line:13,ch:10},testPos={line:6,ch:7},testJumpPos={line:6,ch:5},jumpPos={line:3,ch:6},testEditor;runs(function(){var openQuickEditor=SpecRunnerUtils.toggleQuickEditAtOffset(EditorManager.getCurrentFullEditor(),start);waitsForDone(openQuickEditor,"Open quick editor")});runs(function(){testEditor=EditorManager.getActiveEditor();testEditor.setCursorPos(testPos);var hintObj=expectHints(JSCodeHints.jsHintProvider);hintsPresentExact(hintObj,["propA"])});runs(function(){testEditor=EditorManager.getActiveEditor();testEditor.setCursorPos(testJumpPos);editorJumped(JSCodeHints,testEditor,jumpPos)})});xit("should see jump to definition on method working in quick editor",function(){var start={line:13,ch:13},testPos={line:5,ch:25},jumpPos={line:9,ch:21},testEditor;runs(function(){var openQuickEditor=SpecRunnerUtils.toggleQuickEditAtOffset(EditorManager.getCurrentFullEditor(),start);waitsForDone(openQuickEditor,"Open quick editor")});runs(function(){testEditor=EditorManager.getActiveEditor();testEditor.setCursorPos(testPos);editorJumped(jumpPos)})})})});describe("Performance suite",function(){this.category="performance";var testPath=extensionPath+"/unittest-files/jquery-ui";beforeEach(function(){SpecRunnerUtils.createTestWindowAndRun(this,function(w){testWindow=w;CommandManager=testWindow.brackets.test.CommandManager;EditorManager=testWindow.brackets.test.EditorManager;PerfUtils=testWindow.brackets.test.PerfUtils})});afterEach(function(){testWindow=null;CommandManager=null;EditorManager=null;PerfUtils=null;SpecRunnerUtils.closeTestWindow()});it("should open inline editors",function(){SpecRunnerUtils.loadProjectInTestWindow(testPath);var extensionRequire,JavaScriptQuickEdit,i,perfMeasurements;runs(function(){perfMeasurements=[{measure:PerfUtils.JAVASCRIPT_INLINE_CREATE,children:[{measure:PerfUtils.JAVASCRIPT_FIND_FUNCTION,children:[{measure:PerfUtils.JSUTILS_GET_ALL_FUNCTIONS,children:[{measure:PerfUtils.DOCUMENT_MANAGER_GET_DOCUMENT_FOR_PATH,name:"Document creation during this search",operation:"sum"},{measure:PerfUtils.JSUTILS_REGEXP,operation:"sum"}]},{measure:PerfUtils.JSUTILS_END_OFFSET,operation:"sum"}]}]}]});runs(function(){extensionRequire=testWindow.brackets.getModule("utils/ExtensionLoader").getRequireContextForExtension("JavaScriptQuickEdit");JavaScriptQuickEdit=extensionRequire("main");waitsForDone(SpecRunnerUtils.openProjectFiles(["ui/jquery.effects.core.js"]),"openProjectFiles")});var runCreateInlineEditor=function(){var editor=EditorManager.getCurrentFullEditor();editor.setCursorPos(271,20);waitsForDone(JavaScriptQuickEdit._createInlineEditor(editor,"extend"),"createInlineEditor",5e3)};function logPerf(){var reporter=UnitTestReporter.getActiveReporter();reporter.logTestWindow(perfMeasurements);reporter.clearTestWindow()}for(i=0;i<5;i++){runs(runCreateInlineEditor);runs(logPerf)}})})})});