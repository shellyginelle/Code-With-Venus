(function(){"use strict";var http=require("http"),pathJoin=require("path").join,connect=require("connect"),utils=require("connect/lib/utils"),mime=require("connect/node_modules/send/node_modules/mime"),parse=utils.parseUrl;var _domainManager;var FILTER_REQUEST_TIMEOUT=5e3;var _filterRequestCounter=0;var _filterRequestTimeout=FILTER_REQUEST_TIMEOUT;var STATIC_CACHE_MAX_AGE=5e3;var _servers={};var _requests={};var _rewritePaths={};var PATH_KEY_PREFIX="LiveDev_";function normalizeRootPath(path){return path&&path[path.length-1]==="/"?path.slice(0,-1):path}function getPathKey(path){return PATH_KEY_PREFIX+normalizeRootPath(path)}function _createServer(path,port,createCompleteCallback){var server,app,address,pathKey=getPathKey(path);_requests[pathKey]={};function requestRoot(server,cb){address=server.address();var req=http.get({host:address.address,port:address.port},function(res){cb(null,res)});req.on("error",function(err){cb(err,null)})}function rewrite(req,res,next){var location={pathname:parse(req).pathname},hasListener=_rewritePaths[pathKey]&&_rewritePaths[pathKey][location.pathname],requestId=_filterRequestCounter++,timeoutId;if("GET"!==req.method&&"HEAD"!==req.method||!hasListener){next();return}var pause=utils.pause(req);function resume(doNext){delete _requests[pathKey][requestId];if(doNext){next()}pause.resume()}_requests[pathKey][requestId]=function(resData){clearTimeout(timeoutId);if(resData.body){var type=mime.lookup(location.pathname),charset=mime.charsets.lookup(type);res.setHeader("Content-Type",type+(charset?"; charset="+charset:""));res.end(resData.body)}resume(!resData.body)};location.hostname=address.address;location.port=address.port;location.root=path;var request={headers:req.headers,location:location,id:requestId};_domainManager.emitEvent("staticServer","requestFilter",[request]);timeoutId=setTimeout(function(){resume(true)},_filterRequestTimeout)}app=connect();app.use(rewrite);app.use(connect["static"](path,{maxAge:STATIC_CACHE_MAX_AGE}));app.use(connect.directory(path));server=http.createServer(app);server.on("listening",function(){requestRoot(server,function(err,res){if(err){createCompleteCallback("Could not GET root after launching server",null)}else{createCompleteCallback(null,server)}})});server.on("error",function(e){if(e.code==="EADDRINUSE"){server.listen(0,"127.0.0.1")}else{throw e}});server.listen(port,"127.0.0.1")}function _cmdGetServer(path,port,cb){var pathKey=getPathKey(path);if(_servers[pathKey]){cb(null,_servers[pathKey].address())}else{_createServer(path,port,function(err,server){if(err){cb(err,null)}else{_servers[pathKey]=server;_rewritePaths[pathKey]={};cb(null,server.address())}})}}function _cmdCloseServer(path,cba){var pathKey=getPathKey(path);if(_servers[pathKey]){var serverToClose=_servers[pathKey];delete _servers[pathKey];serverToClose.close();return true}return false}function _cmdSetRequestFilterPaths(root,paths){var pathKey=getPathKey(root),rewritePaths={};_rewritePaths[pathKey]=rewritePaths;paths.forEach(function(path){rewritePaths[path]=pathJoin(root,path)})}function _cmdWriteFilteredResponse(root,path,resData){var pathKey=getPathKey(root),callback=_requests[pathKey][resData.id];if(callback){callback(resData)}else{console.warn("writeFilteredResponse: Missing callback for %s. This command must only be called after a requestFilter event has fired for a path.",pathJoin(root,path))}}function _cmdSetRequestFilterTimeout(timeout){timeout=timeout===undefined?FILTER_REQUEST_TIMEOUT:timeout;_filterRequestTimeout=timeout}function init(domainManager){_domainManager=domainManager;if(!domainManager.hasDomain("staticServer")){domainManager.registerDomain("staticServer",{major:0,minor:1})}_domainManager.registerCommand("staticServer","_setRequestFilterTimeout",_cmdSetRequestFilterTimeout,false,"Unit tests only. Set timeout value for filtered requests.",[{name:"timeout",type:"number",description:"Duration to wait before passing a filtered request to the static file server."}],[]);_domainManager.registerCommand("staticServer","getServer",_cmdGetServer,true,"Starts or returns an existing server for the given path.",[{name:"path",type:"string",description:"Absolute filesystem path for root of server."},{name:"port",type:"number",description:"Port number to use for HTTP server.  Pass zero to assign a random port."}],[{name:"address",type:"{address: string, family: string, port: number}",description:"hostname (stored in 'address' parameter), port, and socket type (stored in 'family' parameter) for the server. Currently, 'family' will always be 'IPv4'."}]);_domainManager.registerCommand("staticServer","closeServer",_cmdCloseServer,false,"Closes the server for the given path.",[{name:"path",type:"string",description:"absolute filesystem path for root of server"}],[{name:"result",type:"boolean",description:"indicates whether a server was found for the specific path then closed"}]);_domainManager.registerCommand("staticServer","setRequestFilterPaths",_cmdSetRequestFilterPaths,false,"Defines a set of paths from a server's root path to watch and fire 'requestFilter' events for.",[{name:"root",type:"string",description:"absolute filesystem path for root of server"},{name:"paths",type:"Array",description:"path to notify"}],[]);_domainManager.registerCommand("staticServer","writeFilteredResponse",_cmdWriteFilteredResponse,false,"Overrides the server response from static middleware with the provided response data. This should be called only in response to a filtered request.",[{name:"root",type:"string",description:"absolute filesystem path for root of server"},{name:"path",type:"string",description:"path to rewrite"},{name:"resData",type:"{body: string, headers: Array}",description:"TODO"}],[]);_domainManager.registerEvent("staticServer","requestFilter",[{name:"location",type:"{hostname: string, pathname: string, port: number, root: string: id: number}",description:"request path"}])}exports.init=init})();